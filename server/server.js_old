const express = require('express');
const axios = require('axios');
const app = express();
const PORT = 3000;

// Middleware to parse JSON bodies
app.use(express.json());

// Replace this with your actual GoHighLevel API key and contact ID
const GO_HIGH_LEVEL_API_KEY = 'pit-699255dd-58c0-4375-9841-4a8129c11634';
let GO_HIGH_LEVEL_CONTACT_ID = ''; // Initialize with an empty string

// Store Contact ID from GoHighLevel
// app.post('/webhook', async (req, res) => {
//   const data = req.body;
//   console.log("Received data from GoHighLevel", data);

//   try {
//     GO_HIGH_LEVEL_CONTACT_ID = data.contact_id;
//     res.json({ message: 'Contact ID stored successfully' });
//     console.log("Contact ID: ", GO_HIGH_LEVEL_CONTACT_ID);
//   } catch (error) {
//     console.error("Error storing contact ID", error);
//     res.status(500).json({ message: 'Failed to store contact ID' });
//   }
  
// });

// Forward data to GoHighLevel
app.post('/batchdata', async (req, res) => {
  const data = req.body;
  console.log("Received data from BatchData:", data);

  // if (!GO_HIGH_LEVEL_CONTACT_ID) {
  //   return res.status(400).json({ message: 'Contact ID not set. Please set the contact ID through /webhook first.' });
  // }

  try {
    // Prepare the GoHighLevel API request
    const response = await axios({
      method: 'put', // or 'post' if creating a new contact
      url: `https://api.gohighlevel.com/v1/contacts/${GO_HIGH_LEVEL_CONTACT_ID}`, // Endpoint for updating a contact
      headers: {
        'Authorization': `Bearer ${GO_HIGH_LEVEL_API_KEY}`,
        'Content-Type': 'application/json'
      },
      data: {
        name: data.owner_name,
        email: data.email || "no-email@example.com", // Replace or update fields as needed
        phone: data.phone,
        // Map data from BatchData to GoHighLevel's custom fields
      }
    });

    console.log("Data forwarded to GoHighLevel:", response.data);

    // Send a success response to the client (BatchData)
    res.json({ message: 'Data forwarded to GoHighLevel successfully', goHighLevelResponse: response.data });

  } catch (error) {
    console.error("Error forwarding data to GoHighLevel:", error.response ? error.response.data : error.message);
    
    // Send an error response if the request to GoHighLevel fails
    res.status(500).json({ message: 'Failed to forward data to GoHighLevel', error: error.response ? error.response.data : error.message });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

